{
  "title": "10分钟上手Pandas",
  "cells": [
    {
      "type": "text",
      "data": "<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/10min.html\">原文地址</a></p>\n<p>这是关于pandas的一个简短的介绍，主要面向的是新手用户。你可以在<a href=\"http://pandas.pydata.org/pandas-docs/stable/cookbook.html#cookbook\">Cookbook</a>查看更多复杂的使用方式。</p>\n<p>通常情况下，我们按照下面这种方式引入：</p>\n<p>In [1]: import pandas as pd</p>\n<p>In [2]: import numpy as np</p>\n<p>In [3]: import matplotlib.pyplot as plt</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E5%AF%B9%E8%B1%A1%E5%88%9B%E5%BB%BA\" title=\"对象创建\"></a>对象创建</p>\n<p>见<a href=\"http://pandas.pydata.org/pandas-docs/stable/dsintro.html#dsintro\">数据结构介绍部分</a>。</p>\n<p>通过传入一个list的数值来创建一个<code>Series</code>，pandas会创建一个默认的整数索引:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>In [4]: s = pd.Series([1,3,5,np.nan,6,8])</p>\n<p>In [5]: s</p>\n<p>Out[5]:</p>\n<p>0 1.0</p>\n<p>1 3.0</p>\n<p>2 5.0</p>\n<p>3 NaN</p>\n<p>4 6.0</p>\n<p>5 8.0</p>\n<p>dtype: float64</p>\n<p>通过传入一个numpy数组来创建一个’DataFrame’，带有一个datetime的索引以及标签列:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>In [6]: dates = pd.date\\_range('20130101', periods=6)</p>\n<p>In [7]: dates</p>\n<p>Out[7]:</p>\n<p>DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',</p>\n<p>'2013-01-05', '2013-01-06'],</p>\n<p>dtype='datetime64[ns]', freq='D')</p>\n<p>In [8]: df = pd.DataFrame(np.random.randn(6,4), index=dates, columns=list('ABCD'))</p>\n<p>In [9]: df</p>\n<p>Out[9]:</p>\n<p>A B C D</p>\n<p>2013-01-01 0.469112 -0.282863 -1.509059 -1.135632</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 -1.044236</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 1.071804</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 0.271860</p>\n<p>2013-01-05 -0.424972 0.567020 0.276232 -1.087401</p>\n<p>2013-01-06 -0.673690 0.113648 -1.478427 0.524988</p>\n<p>通过传入一个可以转换为类series（series-like）的字典对象来创建一个<code>DataFrame</code>:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>In [10]: df2 = pd.DataFrame({ 'A' : 1.,</p>\n<p>....: 'B' : pd.Timestamp('20130102'),</p>\n<p>....: 'C' : pd.Series(1,index=list(range(4)),dtype='float32'),</p>\n<p>....: 'D' : np.array([3] \\* 4,dtype='int32'),</p>\n<p>....: 'E' : pd.Categorical([\"test\",\"train\",\"test\",\"train\"]),</p>\n<p>....: 'F' : 'foo' })</p>\n<p>....:</p>\n<p>In [11]: df2</p>\n<p>Out[11]:</p>\n<p>A B C D E F</p>\n<p>0 1.0 2013-01-02 1.0 3 test foo</p>\n<p>1 1.0 2013-01-02 1.0 3 train foo</p>\n<p>2 1.0 2013-01-02 1.0 3 test foo</p>\n<p>3 1.0 2013-01-02 1.0 3 train foo</p>\n<p>查看不同列的数据类型：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [12]: df2.dtypes</p>\n<p>Out[12]:</p>\n<p>A float64</p>\n<p>B datetime64[ns]</p>\n<p>C float32</p>\n<p>D int32</p>\n<p>E category</p>\n<p>F object</p>\n<p>dtype: object</p>\n<p>如果你正在使用IPython，使用Tab自动补全功能会自动识别所有的属性以及自定义的列，下图中是所有能够被自动识别的属性的一个子集：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>In [13]: df2.\\</p>\n<p>df2.A df2.bool</p>\n<p>df2.abs df2.boxplot</p>\n<p>df2.add df2.C</p>\n<p>df2.add\\_prefix df2.clip</p>\n<p>df2.add\\_suffix df2.clip\\_lower</p>\n<p>df2.align df2.clip\\_upper</p>\n<p>df2.all df2.columns</p>\n<p>df2.any df2.combine</p>\n<p>df2.append df2.combine\\_first</p>\n<p>df2.apply df2.compound</p>\n<p>df2.applymap df2.consolidate</p>\n<p>df2.D</p>\n<p>正如你所看的，这里的列<code>A</code>,<code>B</code>,<code>C</code>和<code>D</code>是自动补全的，为了简洁，其余的属性被截断。</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE\" title=\"查看数据\"></a>查看数据</p>\n<p>详情请参阅:<a href=\"http://pandas.pydata.org/pandas-docs/stable/basics.html#basics\">Basics section</a></p>\n<p>查看frame中头部和尾部的行：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>In [14]: df.head()</p>\n<p>Out[14]:</p>\n<p>A B C D</p>\n<p>2013-01-01 0.469112 -0.282863 -1.509059 -1.135632</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 -1.044236</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 1.071804</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 0.271860</p>\n<p>2013-01-05 -0.424972 0.567020 0.276232 -1.087401</p>\n<p>In [15]: df.tail(3)</p>\n<p>Out[15]:</p>\n<p>A B C D</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 0.271860</p>\n<p>2013-01-05 -0.424972 0.567020 0.276232 -1.087401</p>\n<p>2013-01-06 -0.673690 0.113648 -1.478427 0.524988</p>\n<p>显示索引，列和底层numpy数据:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>In [16]: df.index</p>\n<p>Out[16]:</p>\n<p>DatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',</p>\n<p>'2013-01-05', '2013-01-06'],</p>\n<p>dtype='datetime64[ns]', freq='D')</p>\n<p>In [17]: df.columns</p>\n<p>Out[17]: Index(['A', 'B', 'C', 'D'], dtype='object')</p>\n<p>In [18]: df.values</p>\n<p>Out[18]:</p>\n<p>array([[ 0.4691, -0.2829, -1.5091, -1.1356],</p>\n<p>[ 1.2121, -0.1732, 0.1192, -1.0442],</p>\n<p>[-0.8618, -2.1046, -0.4949, 1.0718],</p>\n<p>[ 0.7216, -0.7068, -1.0396, 0.2719],</p>\n<p>[-0.425 , 0.567 , 0.2762, -1.0874],</p>\n<p>[-0.6737, 0.1136, -1.4784, 0.525 ]])</p>\n<p><code>describe()</code>函数对于数据的快速统计汇总：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>In [19]: df.describe()</p>\n<p>Out[19]:</p>\n<p>A B C D</p>\n<p>count 6.000000 6.000000 6.000000 6.000000</p>\n<p>mean 0.073711 -0.431125 -0.687758 -0.233103</p>\n<p>std 0.843157 0.922818 0.779887 0.973118</p>\n<p>min -0.861849 -2.104569 -1.509059 -1.135632</p>\n<p>25% -0.611510 -0.600794 -1.368714 -1.076610</p>\n<p>50% 0.022070 -0.228039 -0.767252 -0.386188</p>\n<p>75% 0.658444 0.041933 -0.034326 0.461706</p>\n<p>max 1.212112 0.567020 0.276232 1.071804</p>\n<p>对数据的转置：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>In [20]: df.T</p>\n<p>Out[20]:</p>\n<p>2013-01-01 2013-01-02 2013-01-03 2013-01-04 2013-01-05 2013-01-06</p>\n<p>A 0.469112 1.212112 -0.861849 0.721555 -0.424972 -0.673690</p>\n<p>B -0.282863 -0.173215 -2.104569 -0.706771 0.567020 0.113648</p>\n<p>C -1.509059 0.119209 -0.494929 -1.039575 0.276232 -1.478427</p>\n<p>D -1.135632 -1.044236 1.071804 0.271860 -1.087401 0.524988</p>\n<p>按轴进行排序</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [21]: df.sort\\_index(axis=1, ascending=False)</p>\n<p>Out[21]:</p>\n<p>D C B A</p>\n<p>2013-01-01 -1.135632 -1.509059 -0.282863 0.469112</p>\n<p>2013-01-02 -1.044236 0.119209 -0.173215 1.212112</p>\n<p>2013-01-03 1.071804 -0.494929 -2.104569 -0.861849</p>\n<p>2013-01-04 0.271860 -1.039575 -0.706771 0.721555</p>\n<p>2013-01-05 -1.087401 0.276232 0.567020 -0.424972</p>\n<p>2013-01-06 0.524988 -1.478427 0.113648 -0.673690</p>\n<p>按值进行排序</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [22]: df.sort\\_values(by='B')</p>\n<p>Out[22]:</p>\n<p>A B C D</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 1.071804</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 0.271860</p>\n<p>2013-01-01 0.469112 -0.282863 -1.509059 -1.135632</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 -1.044236</p>\n<p>2013-01-06 -0.673690 0.113648 -1.478427 0.524988</p>\n<p>2013-01-05 -0.424972 0.567020 0.276232 -1.087401</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E9%80%89%E6%8B%A9\" title=\"选择\"></a>选择</p>\n<p>&gt; **注意：**虽然用于选择和设置的标准的Python/Numpy表达式非常直观，可用于交互式工作，但对于生产代码，我们推荐优化的pandas数据访问方法<code>.at</code>，<code>.iat</code>，<code>.loc</code>，<code>.iloc</code>和<code>.ix</code>。</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing\">Indexing and Selecing Data</a>和 <a href=\"http://pandas.pydata.org/pandas-docs/stable/advanced.html#advanced\">MultiIndex / Advanced Indexing</a>。</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E8%8E%B7%E5%8F%96\" title=\"获取\"></a>获取</p>\n<p>选择一个单独的列，这将会返回一个<code>Series</code>，等同于<code>df.A</code>：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [23]: df['A']</p>\n<p>Out[23]:</p>\n<p>2013-01-01 0.469112</p>\n<p>2013-01-02 1.212112</p>\n<p>2013-01-03 -0.861849</p>\n<p>2013-01-04 0.721555</p>\n<p>2013-01-05 -0.424972</p>\n<p>2013-01-06 -0.673690</p>\n<p>Freq: D, Name: A, dtype: float64</p>\n<p>通过<code>[]</code>进行选择，这将会对行进行切片:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>In [24]: df[0:3]</p>\n<p>Out[24]:</p>\n<p>A B C D</p>\n<p>2013-01-01 0.469112 -0.282863 -1.509059 -1.135632</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 -1.044236</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 1.071804</p>\n<p>In [25]: df['20130102':'20130104']</p>\n<p>Out[25]:</p>\n<p>A B C D</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 -1.044236</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 1.071804</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 0.271860</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E9%80%9A%E8%BF%87%E6%A0%87%E7%AD%BE%E9%80%89%E6%8B%A9\" title=\"通过标签选择\"></a>通过标签选择</p>\n<p>详情请参加<a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-label\">Selection by Label</a></p>\n<p>使用标签获取横截面</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>In [26]: df.loc[dates[0]]</p>\n<p>Out[26]:</p>\n<p>A 0.469112</p>\n<p>B -0.282863</p>\n<p>C -1.509059</p>\n<p>D -1.135632</p>\n<p>Name: 2013-01-01 00:00:00, dtype: float64</p>\n<p>通过标签选择多轴</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [27]: df.loc[:,['A','B']]</p>\n<p>Out[27]:</p>\n<p>A B</p>\n<p>2013-01-01 0.469112 -0.282863</p>\n<p>2013-01-02 1.212112 -0.173215</p>\n<p>2013-01-03 -0.861849 -2.104569</p>\n<p>2013-01-04 0.721555 -0.706771</p>\n<p>2013-01-05 -0.424972 0.567020</p>\n<p>2013-01-06 -0.673690 0.113648</p>\n<p>显示包括两个端点的标签切片：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>In [28]: df.loc['20130102':'20130104',['A','B']]</p>\n<p>Out[28]:</p>\n<p>A B</p>\n<p>2013-01-02 1.212112 -0.173215</p>\n<p>2013-01-03 -0.861849 -2.104569</p>\n<p>2013-01-04 0.721555 -0.706771</p>\n<p>减少返回的对象的尺寸:</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>In [29]: df.loc['20130102',['A','B']]</p>\n<p>Out[29]:</p>\n<p>A 1.212112</p>\n<p>B -0.173215</p>\n<p>Name: 2013-01-02 00:00:00, dtype: float64</p>\n<p>获得标量值</p>\n<p>1</p>\n<p>2</p>\n<p>In [30]: df.loc[dates[0],'A']</p>\n<p>Out[30]: 0.46911229990718628</p>\n<p>快速访问一个标量（与上一个方法等价）</p>\n<p>1</p>\n<p>2</p>\n<p>In [31]: <a href=\"http://df.at\">df.at</a>[dates[0],'A']</p>\n<p>Out[31]: 0.46911229990718628</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E6%8C%89%E4%BD%8D%E7%BD%AE%E9%80%89%E6%8B%A9\" title=\"按位置选择\"></a>按位置选择</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/indexing.html#indexing-integer\">Selection by Position</a></p>\n<p>通过传入的整数位置来选择：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>In [32]: df.iloc[3]</p>\n<p>Out[32]:</p>\n<p>A 0.721555</p>\n<p>B -0.706771</p>\n<p>C -1.039575</p>\n<p>D 0.271860</p>\n<p>Name: 2013-01-04 00:00:00, dtype: float64</p>\n<p>可以做类似numpy/python的整数切片操作</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>In [33]: df.iloc[3:5,0:2]</p>\n<p>Out[33]:</p>\n<p>A B</p>\n<p>2013-01-04 0.721555 -0.706771</p>\n<p>2013-01-05 -0.424972 0.567020</p>\n<p>可以做类似于numpy/python风格的列出指定索引位置的行列列表的操作</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>In [34]: df.iloc[[1,2,4],[0,2]]</p>\n<p>Out[34]:</p>\n<p>A C</p>\n<p>2013-01-02 1.212112 0.119209</p>\n<p>2013-01-03 -0.861849 -0.494929</p>\n<p>2013-01-05 -0.424972 0.276232</p>\n<p>选择具体的行</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>In [35]: df.iloc[1:3,:]</p>\n<p>Out[35]:</p>\n<p>A B C D</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 -1.044236</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 1.071804</p>\n<p>选择具体的列</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [36]: df.iloc[:,1:3]</p>\n<p>Out[36]:</p>\n<p>B C</p>\n<p>2013-01-01 -0.282863 -1.509059</p>\n<p>2013-01-02 -0.173215 0.119209</p>\n<p>2013-01-03 -2.104569 -0.494929</p>\n<p>2013-01-04 -0.706771 -1.039575</p>\n<p>2013-01-05 0.567020 0.276232</p>\n<p>2013-01-06 0.113648 -1.478427</p>\n<p>明确地获取一个值</p>\n<p>1</p>\n<p>2</p>\n<p>In [37]: df.iloc[1,1]</p>\n<p>Out[37]: -0.17321464905330858</p>\n<p>快速访问一个标量（等同于上面的方法）</p>\n<p>1</p>\n<p>2</p>\n<p>In [38]: df.iat[1,1]</p>\n<p>Out[38]: -0.17321464905330858</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E5%B8%83%E5%B0%94%E7%B4%A2%E5%BC%95%E6%93%8D%E4%BD%9C\" title=\"布尔索引操作\"></a>布尔索引操作</p>\n<p>使用单一列的值来选取数据</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>In [39]: df[df.A \\&gt; 0]</p>\n<p>Out[39]:</p>\n<p>A B C D</p>\n<p>2013-01-01 0.469112 -0.282863 -1.509059 -1.135632</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 -1.044236</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 0.271860</p>\n<p>从DataFrame选取符合布尔判断条件的数据</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [40]: df[df \\&gt; 0]</p>\n<p>Out[40]:</p>\n<p>A B C D</p>\n<p>2013-01-01 0.469112 NaN NaN NaN</p>\n<p>2013-01-02 1.212112 NaN 0.119209 NaN</p>\n<p>2013-01-03 NaN NaN NaN 1.071804</p>\n<p>2013-01-04 0.721555 NaN NaN 0.271860</p>\n<p>2013-01-05 NaN 0.567020 0.276232 NaN</p>\n<p>2013-01-06 NaN 0.113648 NaN 0.524988</p>\n<p>使用<code>isin()</code>方法来过滤：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>In [41]: df2 = df.copy()</p>\n<p>In [42]: df2['E'] = ['one', 'one','two','three','four','three']</p>\n<p>In [43]: df2</p>\n<p>Out[43]:</p>\n<p>A B C D E</p>\n<p>2013-01-01 0.469112 -0.282863 -1.509059 -1.135632 one</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 -1.044236 one</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 1.071804 two</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 0.271860 three</p>\n<p>2013-01-05 -0.424972 0.567020 0.276232 -1.087401 four</p>\n<p>2013-01-06 -0.673690 0.113648 -1.478427 0.524988 three</p>\n<p>In [44]: df2[df2['E'].isin(['two','four'])]</p>\n<p>Out[44]:</p>\n<p>A B C D E</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 1.071804 two</p>\n<p>2013-01-05 -0.424972 0.567020 0.276232 -1.087401 four</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E8%AE%BE%E7%BD%AE%E6%95%B0%E6%8D%AE\" title=\"设置数据\"></a>设置数据</p>\n<p>设置新列，自动按索引排列数据</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>In [45]: s1 = pd.Series([1,2,3,4,5,6], index=pd.date\\_range('20130102', periods=6))</p>\n<p>In [46]: s1</p>\n<p>Out[46]:</p>\n<p>2013-01-02 1</p>\n<p>2013-01-03 2</p>\n<p>2013-01-04 3</p>\n<p>2013-01-05 4</p>\n<p>2013-01-06 5</p>\n<p>2013-01-07 6</p>\n<p>Freq: D, dtype: int64</p>\n<p>In [47]: df['F'] = s1</p>\n<p>通过标签来设定数据</p>\n<p>1</p>\n<p>In [48]: <a href=\"http://df.at\">df.at</a>[dates[0],'A'] = 0</p>\n<p>通过位置索引来设定数据</p>\n<p>1</p>\n<p>In [49]: df.iat[0,1] = 0</p>\n<p>通过分配一个numpy数组来设定数据</p>\n<p>1</p>\n<p>In [50]: df.loc[:,'D'] = np.array([5] \\* len(df))</p>\n<p>之前操作的结果</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [51]: df</p>\n<p>Out[51]:</p>\n<p>A B C D F</p>\n<p>2013-01-01 0.000000 0.000000 -1.509059 5 NaN</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 5 1.0</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 5 2.0</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 5 3.0</p>\n<p>2013-01-05 -0.424972 0.567020 0.276232 5 4.0</p>\n<p>2013-01-06 -0.673690 0.113648 -1.478427 5 5.0</p>\n<p>带有<code>where</code>操作的设值</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>In [52]: df2 = df.copy()</p>\n<p>In [53]: df2[df2 \\&gt; 0] = -df2</p>\n<p>In [54]: df2</p>\n<p>Out[54]:</p>\n<p>A B C D F</p>\n<p>2013-01-01 0.000000 0.000000 -1.509059 -5 NaN</p>\n<p>2013-01-02 -1.212112 -0.173215 -0.119209 -5 -1.0</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 -5 -2.0</p>\n<p>2013-01-04 -0.721555 -0.706771 -1.039575 -5 -3.0</p>\n<p>2013-01-05 -0.424972 -0.567020 -0.276232 -5 -4.0</p>\n<p>2013-01-06 -0.673690 -0.113648 -1.478427 -5 -5.0</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E7%BC%BA%E5%A4%B1%E5%80%BC%E5%A4%84%E7%90%86\" title=\"缺失值处理\"></a>缺失值处理</p>\n<p>pandas主要使用<code>np.nan</code>来代表缺失数据。这些值将默认不会包含在计算中，详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/missing_data.html#missing-data\">Missing Data section</a></p>\n<p>Reindexing允许您更改/添加/删除指定轴上的索引。这将返回数据的副本。</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>In [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])</p>\n<p>In [56]: df1.loc[dates[0]:dates[1],'E'] = 1</p>\n<p>In [57]: df1</p>\n<p>Out[57]:</p>\n<p>A B C D F E</p>\n<p>2013-01-01 0.000000 0.000000 -1.509059 5 NaN 1.0</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 5 1.0 1.0</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 5 2.0 NaN</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 5 3.0 NaN</p>\n<p>删除所有具有缺失值的数据</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>In [58]: df1.dropna(how='any')</p>\n<p>Out[58]:</p>\n<p>A B C D F E</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 5 1.0 1.0</p>\n<p>填充缺失数据</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>In [59]: df1.fillna(value=5)</p>\n<p>Out[59]:</p>\n<p>A B C D F E</p>\n<p>2013-01-01 0.000000 0.000000 -1.509059 5 5.0 1.0</p>\n<p>2013-01-02 1.212112 -0.173215 0.119209 5 1.0 1.0</p>\n<p>2013-01-03 -0.861849 -2.104569 -0.494929 5 2.0 5.0</p>\n<p>2013-01-04 0.721555 -0.706771 -1.039575 5 3.0 5.0</p>\n<p>获取值为nan的布尔值掩码</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>In [60]: pd.isna(df1)</p>\n<p>Out[60]:</p>\n<p>A B C D F E</p>\n<p>2013-01-01 False False False False True False</p>\n<p>2013-01-02 False False False False False False</p>\n<p>2013-01-03 False False False False False True</p>\n<p>2013-01-04 False False False False False True</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C\" title=\"相关操作\"></a>相关操作</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-binop\">Basic section on Binary Ops</a></p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E7%BB%9F%E8%AE%A1\" title=\"统计\"></a>统计</p>\n<p>一般操作不包括丢失的数据。</p>\n<p>执行描述性统计操作(沿数值方向求均值)</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>In [61]: df.mean()</p>\n<p>Out[61]:</p>\n<p>A -0.004474</p>\n<p>B -0.383981</p>\n<p>C -0.687758</p>\n<p>D 5.000000</p>\n<p>F 3.000000</p>\n<p>dtype: float64</p>\n<p>在另一个轴上做相同的操作(沿水平方向求均值)</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [62]: df.mean(1)</p>\n<p>Out[62]:</p>\n<p>2013-01-01 0.872735</p>\n<p>2013-01-02 1.431621</p>\n<p>2013-01-03 0.707731</p>\n<p>2013-01-04 1.395042</p>\n<p>2013-01-05 1.883656</p>\n<p>2013-01-06 1.592306</p>\n<p>Freq: D, dtype: float64</p>\n<p>使用具有不同维度且需要对齐的对象进行操作。另外，pandas会沿指定的尺寸自动广播。</p>\n<p>&gt; 注意：1-np.nan 输出结果为NaN</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>In [63]: s = pd.Series([1,3,5,np.nan,6,8], index=dates).shift(2)</p>\n<p>In [64]: s</p>\n<p>Out[64]:</p>\n<p>2013-01-01 NaN</p>\n<p>2013-01-02 NaN</p>\n<p>2013-01-03 1.0</p>\n<p>2013-01-04 3.0</p>\n<p>2013-01-05 5.0</p>\n<p>2013-01-06 NaN</p>\n<p>Freq: D, dtype: float64</p>\n<p>In [65]: df.sub(s, axis='index')</p>\n<p>Out[65]:</p>\n<p>A B C D F</p>\n<p>2013-01-01 NaN NaN NaN NaN NaN</p>\n<p>2013-01-02 NaN NaN NaN NaN NaN</p>\n<p>2013-01-03 -1.861849 -3.104569 -1.494929 4.0 1.0</p>\n<p>2013-01-04 -2.278445 -3.706771 -4.039575 2.0 0.0</p>\n<p>2013-01-05 -5.424972 -4.432980 -4.723768 0.0 -1.0</p>\n<p>2013-01-06 NaN NaN NaN NaN NaN</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E5%BA%94%E7%94%A8\" title=\"应用\"></a>应用</p>\n<p>将函数应用于数据</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>\\# 累加操作</p>\n<p>In [66]: df.apply(np.cumsum)</p>\n<p>Out[66]:</p>\n<p>A B C D F</p>\n<p>2013-01-01 0.000000 0.000000 -1.509059 5 NaN</p>\n<p>2013-01-02 1.212112 -0.173215 -1.389850 10 1.0</p>\n<p>2013-01-03 0.350263 -2.277784 -1.884779 15 3.0</p>\n<p>2013-01-04 1.071818 -2.984555 -2.924354 20 6.0</p>\n<p>2013-01-05 0.646846 -2.417535 -2.648122 25 10.0</p>\n<p>2013-01-06 -0.026844 -2.303886 -4.126549 30 15.0</p>\n<p>In [67]: df.apply(lambda x: x.max() - x.min())</p>\n<p>Out[67]:</p>\n<p>A 2.073961</p>\n<p>B 2.671590</p>\n<p>C 1.785291</p>\n<p>D 0.000000</p>\n<p>F 4.000000</p>\n<p>dtype: float64</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E7%9B%B4%E6%96%B9%E5%9B%BE\" title=\"直方图\"></a>直方图</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-discretization\">Histogramming and Discretization</a></p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>22</p>\n<p>23</p>\n<p>In [68]: s = pd.Series(np.random.randint(0, 7, size=10))</p>\n<p>In [69]: s</p>\n<p>Out[69]:</p>\n<p>0 4</p>\n<p>1 2</p>\n<p>2 1</p>\n<p>3 2</p>\n<p>4 6</p>\n<p>5 4</p>\n<p>6 4</p>\n<p>7 6</p>\n<p>8 4</p>\n<p>9 4</p>\n<p>dtype: int64</p>\n<p>In [70]: s.value\\_counts()</p>\n<p>Out[70]:</p>\n<p>4 5</p>\n<p>6 2</p>\n<p>2 2</p>\n<p>1 1</p>\n<p>dtype: int64</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%96%B9%E6%B3%95\" title=\"字符串方法\"></a>字符串方法</p>\n<p>Series对象在其str属性中配备了一组字符串处理方法，可以很容易的应用到数组中的每个元素，如下段代码所示。更多详情请参考：<a href=\"http://pandas.pydata.org/pandas-docs/stable/text.html#text-string-methods\">Vectorized String Methods</a></p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>In [71]: s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])</p>\n<p>In [72]: s.str.lower()</p>\n<p>Out[72]:</p>\n<p>0 a</p>\n<p>1 b</p>\n<p>2 c</p>\n<p>3 aaba</p>\n<p>4 baca</p>\n<p>5 NaN</p>\n<p>6 caba</p>\n<p>7 dog</p>\n<p>8 cat</p>\n<p>dtype: object</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E5%90%88%E5%B9%B6\" title=\"合并\"></a>合并</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#Concat\" title=\"Concat\"></a>Concat</p>\n<p>Pandas提供了大量的方法能够轻松的对Series，DataFrame和Panel对象进行各种符合各种逻辑关系的合并操作。</p>\n<p>具体请参阅：<a href=\"http://pandas.pydata.org/pandas-docs/stable/merging.html#merging\">Merging section</a></p>\n<p>通过使用<code>concat()</code>来将pandas对象链接起来：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>22</p>\n<p>23</p>\n<p>24</p>\n<p>25</p>\n<p>26</p>\n<p>27</p>\n<p>28</p>\n<p>29</p>\n<p>30</p>\n<p>31</p>\n<p>32</p>\n<p>In [73]: df = pd.DataFrame(np.random.randn(10, 4))</p>\n<p>In [74]: df</p>\n<p>Out[74]:</p>\n<p>0 1 2 3</p>\n<p>0 -0.548702 1.467327 -1.015962 -0.483075</p>\n<p>1 1.637550 -1.217659 -0.291519 -1.745505</p>\n<p>2 -0.263952 0.991460 -0.919069 0.266046</p>\n<p>3 -0.709661 1.669052 1.037882 -1.705775</p>\n<p>4 -0.919854 -0.042379 1.247642 -0.009920</p>\n<p>5 0.290213 0.495767 0.362949 1.548106</p>\n<p>6 -1.131345 -0.089329 0.337863 -0.945867</p>\n<p>7 -0.932132 1.956030 0.017587 -0.016692</p>\n<p>8 -0.575247 0.254161 -1.143704 0.215897</p>\n<p>9 1.193555 -0.077118 -0.408530 -0.862495</p>\n<p>\\# break it into pieces</p>\n<p>In [75]: pieces = [df[:3], df[3:7], df[7:]]</p>\n<p>In [76]: pd.concat(pieces)</p>\n<p>Out[76]:</p>\n<p>0 1 2 3</p>\n<p>0 -0.548702 1.467327 -1.015962 -0.483075</p>\n<p>1 1.637550 -1.217659 -0.291519 -1.745505</p>\n<p>2 -0.263952 0.991460 -0.919069 0.266046</p>\n<p>3 -0.709661 1.669052 1.037882 -1.705775</p>\n<p>4 -0.919854 -0.042379 1.247642 -0.009920</p>\n<p>5 0.290213 0.495767 0.362949 1.548106</p>\n<p>6 -1.131345 -0.089329 0.337863 -0.945867</p>\n<p>7 -0.932132 1.956030 0.017587 -0.016692</p>\n<p>8 -0.575247 0.254161 -1.143704 0.215897</p>\n<p>9 1.193555 -0.077118 -0.408530 -0.862495</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#Join\" title=\"Join\"></a>Join</p>\n<p>类似于SQL类型的合并</p>\n<p>具体请参阅：<a href=\"http://pandas.pydata.org/pandas-docs/stable/merging.html#merging-join\">Database style joining</a></p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>22</p>\n<p>23</p>\n<p>In [77]: left = pd.DataFrame({'key': ['foo', 'foo'], 'lval': [1, 2]})</p>\n<p>In [78]: right = pd.DataFrame({'key': ['foo', 'foo'], 'rval': [4, 5]})</p>\n<p>In [79]: left</p>\n<p>Out[79]:</p>\n<p>key lval</p>\n<p>0 foo 1</p>\n<p>1 foo 2</p>\n<p>In [80]: right</p>\n<p>Out[80]:</p>\n<p>key rval</p>\n<p>0 foo 4</p>\n<p>1 foo 5</p>\n<p>In [81]: pd.merge(left, right, on='key')</p>\n<p>Out[81]:</p>\n<p>key lval rval</p>\n<p>0 foo 1 4</p>\n<p>1 foo 1 5</p>\n<p>2 foo 2 4</p>\n<p>3 foo 2 5</p>\n<p>另一个可以给出的例子是：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>In [82]: left = pd.DataFrame({'key': ['foo', 'bar'], 'lval': [1, 2]})</p>\n<p>In [83]: right = pd.DataFrame({'key': ['foo', 'bar'], 'rval': [4, 5]})</p>\n<p>In [84]: left</p>\n<p>Out[84]:</p>\n<p>key lval</p>\n<p>0 foo 1</p>\n<p>1 bar 2</p>\n<p>In [85]: right</p>\n<p>Out[85]:</p>\n<p>key rval</p>\n<p>0 foo 4</p>\n<p>1 bar 5</p>\n<p>In [86]: pd.merge(left, right, on='key')</p>\n<p>Out[86]:</p>\n<p>key lval rval</p>\n<p>0 foo 1 4</p>\n<p>1 bar 2 5</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#Append\" title=\"Append\"></a>Append</p>\n<p>将一行连接到一个DataFrame上。</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/merging.html#merging-concatenation\">Appending</a></p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>22</p>\n<p>23</p>\n<p>24</p>\n<p>25</p>\n<p>26</p>\n<p>27</p>\n<p>28</p>\n<p>In [87]: df = pd.DataFrame(np.random.randn(8, 4), columns=['A','B','C','D'])</p>\n<p>In [88]: df</p>\n<p>Out[88]:</p>\n<p>A B C D</p>\n<p>0 1.346061 1.511763 1.627081 -0.990582</p>\n<p>1 -0.441652 1.211526 0.268520 0.024580</p>\n<p>2 -1.577585 0.396823 -0.105381 -0.532532</p>\n<p>3 1.453749 1.208843 -0.080952 -0.264610</p>\n<p>4 -0.727965 -0.589346 0.339969 -0.693205</p>\n<p>5 -0.339355 0.593616 0.884345 1.591431</p>\n<p>6 0.141809 0.220390 0.435589 0.192451</p>\n<p>7 -0.096701 0.803351 1.715071 -0.708758</p>\n<p>In [89]: s = df.iloc[3]</p>\n<p>In [90]: df.append(s, ignore\\_index=True)</p>\n<p>Out[90]:</p>\n<p>A B C D</p>\n<p>0 1.346061 1.511763 1.627081 -0.990582</p>\n<p>1 -0.441652 1.211526 0.268520 0.024580</p>\n<p>2 -1.577585 0.396823 -0.105381 -0.532532</p>\n<p>3 1.453749 1.208843 -0.080952 -0.264610</p>\n<p>4 -0.727965 -0.589346 0.339969 -0.693205</p>\n<p>5 -0.339355 0.593616 0.884345 1.591431</p>\n<p>6 0.141809 0.220390 0.435589 0.192451</p>\n<p>7 -0.096701 0.803351 1.715071 -0.708758</p>\n<p>8 1.453749 1.208843 -0.080952 -0.264610</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E5%88%86%E7%BB%84%EF%BC%88Grouping%EF%BC%89\" title=\"分组（Grouping）\"></a>分组（Grouping）</p>\n<p>对于”group by”操作，我们通常是指以下一个或多个操作步骤：</p>\n<p>* **（Splitting）**按照一些规则将数据分为不同的组；</p>\n<p>* **（Applying）**对于每组数据分别执行一个函数；</p>\n<p>* **（Combining）**将结果组合到一个数据结构中；</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/groupby.html#groupby\">Grouping section</a></p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>In [91]: df = pd.DataFrame({'A' : ['foo', 'bar', 'foo', 'bar',</p>\n<p>....: 'foo', 'bar', 'foo', 'foo'],</p>\n<p>....: 'B' : ['one', 'one', 'two', 'three',</p>\n<p>....: 'two', 'two', 'one', 'three'],</p>\n<p>....: 'C' : np.random.randn(8),</p>\n<p>....: 'D' : np.random.randn(8)})</p>\n<p>....:</p>\n<p>In [92]: df</p>\n<p>Out[92]:</p>\n<p>A B C D</p>\n<p>0 foo one -1.202872 -0.055224</p>\n<p>1 bar one -1.814470 2.395985</p>\n<p>2 foo two 1.018601 1.552825</p>\n<p>3 bar three -0.595447 0.166599</p>\n<p>4 foo two 1.395433 0.047609</p>\n<p>5 bar two -0.392670 -0.136473</p>\n<p>6 foo one 0.007207 -0.561757</p>\n<p>7 foo three 1.928123 -1.623033</p>\n<p>分组，然后将函数总和<code>sum</code>应用于结果组。</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>In [93]: df.groupby('A').sum()</p>\n<p>Out[93]:</p>\n<p>C D</p>\n<p>A</p>\n<p>bar -2.802588 2.42611</p>\n<p>foo 3.146492 -0.63958</p>\n<p>按多列分组会形成一个分层索引，然后我们应用这个函数。</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>In [94]: df.groupby(['A','B']).sum()</p>\n<p>Out[94]:</p>\n<p>C D</p>\n<p>A B</p>\n<p>bar one -1.814470 2.395985</p>\n<p>three -0.595447 0.166599</p>\n<p>two -0.392670 -0.136473</p>\n<p>foo one -1.195665 -0.616981</p>\n<p>three 1.928123 -1.623033</p>\n<p>two 2.414034 1.600434</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#Reshaping\" title=\"Reshaping\"></a>Reshaping</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/advanced.html#advanced-hierarchical\">Hierarchical Indexing</a>和<a href=\"http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-stacking\">Reshaping</a>。</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#Stack\" title=\"Stack\"></a>Stack</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>In [95]: tuples = list(zip(\\*[['bar', 'bar', 'baz', 'baz',</p>\n<p>....: 'foo', 'foo', 'qux', 'qux'],</p>\n<p>....: ['one', 'two', 'one', 'two',</p>\n<p>....: 'one', 'two', 'one', 'two']]))</p>\n<p>....:</p>\n<p>In [96]: index = pd.MultiIndex.from\\_tuples(tuples, names=['first', 'second'])</p>\n<p>In [97]: df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=['A', 'B'])</p>\n<p>In [98]: df2 = df[:4]</p>\n<p>In [99]: df2</p>\n<p>Out[99]:</p>\n<p>A B</p>\n<p>first second</p>\n<p>bar one 0.029399 -0.542108</p>\n<p>two 0.282696 -0.087302</p>\n<p>baz one -1.575170 1.771208</p>\n<p>two 0.816482 1.100230</p>\n<p><code>stack()</code>方法“压缩”了DataFrame列中的级别。</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>In [100]: stacked = df2.stack()</p>\n<p>In [101]: stacked</p>\n<p>Out[101]:</p>\n<p>first second</p>\n<p>bar one A 0.029399</p>\n<p>B -0.542108</p>\n<p>two A 0.282696</p>\n<p>B -0.087302</p>\n<p>baz one A -1.575170</p>\n<p>B 1.771208</p>\n<p>two A 0.816482</p>\n<p>B 1.100230</p>\n<p>dtype: float64</p>\n<p>对于“堆叠的(stacked)”DataFrame或Series（以MultiIndex为索引），<code>stack()</code>的反向操作是<code>unstack()</code>，默认情况下，它将卸载**最后一层**：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>22</p>\n<p>23</p>\n<p>24</p>\n<p>25</p>\n<p>26</p>\n<p>In [102]: stacked.unstack()</p>\n<p>Out[102]:</p>\n<p>A B</p>\n<p>first second</p>\n<p>bar one 0.029399 -0.542108</p>\n<p>two 0.282696 -0.087302</p>\n<p>baz one -1.575170 1.771208</p>\n<p>two 0.816482 1.100230</p>\n<p>In [103]: stacked.unstack(1)</p>\n<p>Out[103]:</p>\n<p>second one two</p>\n<p>first</p>\n<p>bar A 0.029399 0.282696</p>\n<p>B -0.542108 -0.087302</p>\n<p>baz A -1.575170 0.816482</p>\n<p>B 1.771208 1.100230</p>\n<p>In [104]: stacked.unstack(0)</p>\n<p>Out[104]:</p>\n<p>first bar baz</p>\n<p>second</p>\n<p>one A 0.029399 -1.575170</p>\n<p>B -0.542108 1.771208</p>\n<p>two A 0.282696 0.816482</p>\n<p>B -0.087302 1.100230</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E6%95%B0%E6%8D%AE%E9%80%8F%E8%A7%86%E8%A1%A8\" title=\"数据透视表\"></a>数据透视表</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/reshaping.html#reshaping-pivot\">Pivot Tables</a></p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>22</p>\n<p>In [105]: df = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] \\* 3,</p>\n<p>.....: 'B' : ['A', 'B', 'C'] \\* 4,</p>\n<p>.....: 'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] \\* 2,</p>\n<p>.....: 'D' : np.random.randn(12),</p>\n<p>.....: 'E' : np.random.randn(12)})</p>\n<p>.....:</p>\n<p>In [106]: df</p>\n<p>Out[106]:</p>\n<p>A B C D E</p>\n<p>0 one A foo 1.418757 -0.179666</p>\n<p>1 one B foo -1.879024 1.291836</p>\n<p>2 two C foo 0.536826 -0.009614</p>\n<p>3 three A bar 1.006160 0.392149</p>\n<p>4 one B bar -0.029716 0.264599</p>\n<p>5 one C bar -1.146178 -0.057409</p>\n<p>6 two A foo 0.100900 -1.425638</p>\n<p>7 three B foo -1.035018 1.024098</p>\n<p>8 one C foo 0.314665 -0.106062</p>\n<p>9 one A bar -0.773723 1.824375</p>\n<p>10 two B bar -1.170653 0.595974</p>\n<p>11 three C bar 0.648740 1.167115</p>\n<p>我们可以很容易地从这些数据生成数据透视表：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>In [107]: pd.pivot\\_table(df, values='D', index=['A', 'B'], columns=['C'])</p>\n<p>Out[107]:</p>\n<p>C bar foo</p>\n<p>A B</p>\n<p>one A -0.773723 1.418757</p>\n<p>B -0.029716 -1.879024</p>\n<p>C -1.146178 0.314665</p>\n<p>three A 1.006160 NaN</p>\n<p>B NaN -1.035018</p>\n<p>C 0.648740 NaN</p>\n<p>two A NaN 0.100900</p>\n<p>B -1.170653 NaN</p>\n<p>C NaN 0.536826</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97\" title=\"时间序列\"></a>时间序列</p>\n<p>Pandas在对频率转换进行重新采样时拥有简单、强大且高效的功能（如将按秒采样的数据转换为按5分钟为单位进行采样的数据）。这种操作在金融领域非常常见。</p>\n<p>详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/timeseries.html#timeseries\">Time Series section</a></p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>In [108]: rng = pd.date\\_range('1/1/2012', periods=100, freq='S')</p>\n<p>In [109]: ts = pd.Series(np.random.randint(0, 500, len(rng)), index=rng)</p>\n<p>In [110]: ts.resample('5Min').sum()</p>\n<p>Out[110]:</p>\n<p>2012-01-01 25083</p>\n<p>Freq: 5T, dtype: int64</p>\n<p>时区表示</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>22</p>\n<p>23</p>\n<p>In [111]: rng = pd.date\\_range('3/6/2012 00:00', periods=5, freq='D')</p>\n<p>In [112]: ts = pd.Series(np.random.randn(len(rng)), rng)</p>\n<p>In [113]: ts</p>\n<p>Out[113]:</p>\n<p>2012-03-06 0.464000</p>\n<p>2012-03-07 0.227371</p>\n<p>2012-03-08 -0.496922</p>\n<p>2012-03-09 0.306389</p>\n<p>2012-03-10 -2.290613</p>\n<p>Freq: D, dtype: float64</p>\n<p>In [114]: ts\\_utc = <a href=\"http://ts.tz\">ts.tz</a>\\_localize('UTC')</p>\n<p>In [115]: ts\\_utc</p>\n<p>Out[115]:</p>\n<p>2012-03-06 00:00:00+00:00 0.464000</p>\n<p>2012-03-07 00:00:00+00:00 0.227371</p>\n<p>2012-03-08 00:00:00+00:00 -0.496922</p>\n<p>2012-03-09 00:00:00+00:00 0.306389</p>\n<p>2012-03-10 00:00:00+00:00 -2.290613</p>\n<p>Freq: D, dtype: float64</p>\n<p>转换成其他时区</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>In [116]: ts\\_utc.tz\\_convert('US/Eastern')</p>\n<p>Out[116]:</p>\n<p>2012-03-05 19:00:00-05:00 0.464000</p>\n<p>2012-03-06 19:00:00-05:00 0.227371</p>\n<p>2012-03-07 19:00:00-05:00 -0.496922</p>\n<p>2012-03-08 19:00:00-05:00 0.306389</p>\n<p>2012-03-09 19:00:00-05:00 -2.290613</p>\n<p>Freq: D, dtype: float64</p>\n<p>在时间跨度表示之间进行转换</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>21</p>\n<p>22</p>\n<p>23</p>\n<p>24</p>\n<p>25</p>\n<p>26</p>\n<p>27</p>\n<p>28</p>\n<p>29</p>\n<p>30</p>\n<p>31</p>\n<p>32</p>\n<p>In [117]: rng = pd.date\\_range('1/1/2012', periods=5, freq='M')</p>\n<p>In [118]: ts = pd.Series(np.random.randn(len(rng)), index=rng)</p>\n<p>In [119]: ts</p>\n<p>Out[119]:</p>\n<p>2012-01-31 -1.134623</p>\n<p>2012-02-29 -1.561819</p>\n<p>2012-03-31 -0.260838</p>\n<p>2012-04-30 0.281957</p>\n<p>2012-05-31 1.523962</p>\n<p>Freq: M, dtype: float64</p>\n<p>In [120]: ps = <a href=\"http://ts.to\">ts.to</a>\\_period()</p>\n<p>In [121]: ps</p>\n<p>Out[121]:</p>\n<p>2012-01 -1.134623</p>\n<p>2012-02 -1.561819</p>\n<p>2012-03 -0.260838</p>\n<p>2012-04 0.281957</p>\n<p>2012-05 1.523962</p>\n<p>Freq: M, dtype: float64</p>\n<p>In [122]: <a href=\"http://ps.to\">ps.to</a>\\_timestamp()</p>\n<p>Out[122]:</p>\n<p>2012-01-01 -1.134623</p>\n<p>2012-02-01 -1.561819</p>\n<p>2012-03-01 -0.260838</p>\n<p>2012-04-01 0.281957</p>\n<p>2012-05-01 1.523962</p>\n<p>Freq: MS, dtype: float64</p>\n<p>周期和时间戳之间的转换可以使用一些方便的算术功能。在下面的例子中，我们将季度结束时间从11月份转换为季末结束时的上午9点：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>In [123]: prng = pd.period\\_range('1990Q1', '2000Q4', freq='Q-NOV')</p>\n<p>In [124]: ts = pd.Series(np.random.randn(len(prng)), prng)</p>\n<p>In [125]: ts.index = (prng.asfreq('M', 'e') + 1).asfreq('H', 's') + 9</p>\n<p>In [126]: ts.head()</p>\n<p>Out[126]:</p>\n<p>1990-03-01 09:00 -0.902937</p>\n<p>1990-06-01 09:00 0.068159</p>\n<p>1990-09-01 09:00 -0.057873</p>\n<p>1990-12-01 09:00 -0.368204</p>\n<p>1991-03-01 09:00 -1.144073</p>\n<p>Freq: H, dtype: float64</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#Categorical\" title=\"Categorical\"></a>Categorical</p>\n<p>pandas可以在DataFrame中引入categorical数据。详情请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/categorical.html#categorical\">categorical introduction</a>和<a href=\"http://pandas.pydata.org/pandas-docs/stable/api.html#api-categorical\">API documentation</a>。</p>\n<p>1</p>\n<p>In [127]: df = pd.DataFrame({\"id\":[1,2,3,4,5,6], \"raw\\_grade\":['a', 'b', 'b', 'a', 'a', 'e']})</p>\n<p>将原始的grade转换为Categorical数据类型：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>In [128]: df[\"grade\"] = df[\"raw\\_grade\"].astype(\"category\")</p>\n<p>In [129]: df[\"grade\"]</p>\n<p>Out[129]:</p>\n<p>0 a</p>\n<p>1 b</p>\n<p>2 b</p>\n<p>3 a</p>\n<p>4 a</p>\n<p>5 e</p>\n<p>Name: grade, dtype: category</p>\n<p>Categories (3, object): [a, b, e]</p>\n<p>将类别重命名为更有意义的名称</p>\n<p>1</p>\n<p>In [130]: df[\"grade\"].cat.categories = [\"very good\", \"good\", \"very bad\"]</p>\n<p>重新排列类别并同时添加缺少的类别（Series .cat下的方法默认返回一个新的系列）。</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>In [131]: df[\"grade\"] = df[\"grade\"].cat.set\\_categories([\"very bad\", \"bad\", \"medium\", \"good\", \"very good\"])</p>\n<p>In [132]: df[\"grade\"]</p>\n<p>Out[132]:</p>\n<p>0 very good</p>\n<p>1 good</p>\n<p>2 good</p>\n<p>3 very good</p>\n<p>4 very good</p>\n<p>5 very bad</p>\n<p>Name: grade, dtype: category</p>\n<p>Categories (5, object): [very bad, bad, medium, good, very good]</p>\n<p>排序是按类别排序的，而不是词汇顺序。</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>In [133]: df.sort\\_values(by=\"grade\")</p>\n<p>Out[133]:</p>\n<p>id raw\\_grade grade</p>\n<p>5 6 e very bad</p>\n<p>1 2 b good</p>\n<p>2 3 b good</p>\n<p>0 1 a very good</p>\n<p>3 4 a very good</p>\n<p>4 5 a very good</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E7%94%BB%E5%9B%BE\" title=\"画图\"></a>画图</p>\n<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/visualization.html#visualization\">Plotting</a>文档</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>In [135]: ts = pd.Series(np.random.randn(1000), index=pd.date\\_range('1/1/2000', periods=1000))</p>\n<p>In [136]: ts = ts.cumsum()</p>\n<p>In [137]: ts.plot()</p>\n<p>Out[137]: \\</p>\n<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/_images/series_plot_basic.png\"><img src=\"quiver-image-url/6311003EC0AB4B6090F449FF4F02ED59.png\" alt=\"\" width=\"401\" height=\"311\"></a></p>\n<p>在DataFrame上，<code>plot()</code>方便绘制所有带标签的列：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>In [138]: df = pd.DataFrame(np.random.randn(1000, 4), index=ts.index,</p>\n<p>.....: columns=['A', 'B', 'C', 'D'])</p>\n<p>.....:</p>\n<p>In [139]: df = df.cumsum()</p>\n<p>In [140]: plt.figure(); df.plot(); plt.legend(loc='best')</p>\n<p>Out[140]: \\</p>\n<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/_images/frame_plot_basic.png\"><img src=\"quiver-image-url/EF5167A0E01E8F9A623E79F0ABEFCF09.png\" alt=\"\" width=\"401\" height=\"311\"></a></p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E5%AF%BC%E5%85%A5%E5%92%8C%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE\" title=\"导入和保存数据\"></a>导入和保存数据</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#CSV\" title=\"CSV\"></a>CSV</p>\n<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/io.html#io-store-in-csv\">Writing to a csv file</a></p>\n<p>1</p>\n<p>In [141]: <a href=\"http://df.to\">df.to</a>\\_csv('foo.csv')</p>\n<p><a href=\"http://pandas.pydata.org/pandas-docs/stable/io.html#io-read-csv-table\">Reading from a csv file</a></p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>In [142]: pd.read\\_csv('foo.csv')</p>\n<p>Out[142]:</p>\n<p>Unnamed: 0 A B C D</p>\n<p>0 2000-01-01 0.266457 -0.399641 -0.219582 1.186860</p>\n<p>1 2000-01-02 -1.170732 -0.345873 1.653061 -0.282953</p>\n<p>2 2000-01-03 -1.734933 0.530468 2.060811 -0.515536</p>\n<p>3 2000-01-04 -1.555121 1.452620 0.239859 -1.156896</p>\n<p>4 2000-01-05 0.578117 0.511371 0.103552 -2.428202</p>\n<p>5 2000-01-06 0.478344 0.449933 -0.741620 -1.962409</p>\n<p>6 2000-01-07 1.235339 -0.091757 -1.543861 -1.084753</p>\n<p>.. ... ... ... ... ...</p>\n<p>993 2002-09-20 -10.628548 -9.153563 -7.883146 28.313940</p>\n<p>994 2002-09-21 -10.390377 -8.727491 -6.399645 30.914107</p>\n<p>995 2002-09-22 -8.985362 -8.485624 -4.669462 31.367740</p>\n<p>996 2002-09-23 -9.558560 -8.781216 -4.499815 30.518439</p>\n<p>997 2002-09-24 -9.902058 -9.340490 -4.386639 30.105593</p>\n<p>998 2002-09-25 -10.216020 -9.480682 -3.933802 29.758560</p>\n<p>999 2002-09-26 -11.856774 -10.671012 -3.216025 29.369368</p>\n<p>[1000 rows x 5 columns]</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#HDF5\" title=\"HDF5\"></a>HDF5</p>\n<p>从<a href=\"http://pandas.pydata.org/pandas-docs/stable/io.html#io-hdf5\">HDFStores</a>读取和写入数据</p>\n<p>写入HDF5存储：</p>\n<p>1</p>\n<p>In [143]: <a href=\"http://df.to\">df.to</a>\\_hdf('foo.h5','df')</p>\n<p>从HDF5存储中读取：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>In [144]: pd.read\\_hdf('foo.h5','df')</p>\n<p>Out[144]:</p>\n<p>A B C D</p>\n<p>2000-01-01 0.266457 -0.399641 -0.219582 1.186860</p>\n<p>2000-01-02 -1.170732 -0.345873 1.653061 -0.282953</p>\n<p>2000-01-03 -1.734933 0.530468 2.060811 -0.515536</p>\n<p>2000-01-04 -1.555121 1.452620 0.239859 -1.156896</p>\n<p>2000-01-05 0.578117 0.511371 0.103552 -2.428202</p>\n<p>2000-01-06 0.478344 0.449933 -0.741620 -1.962409</p>\n<p>2000-01-07 1.235339 -0.091757 -1.543861 -1.084753</p>\n<p>... ... ... ... ...</p>\n<p>2002-09-20 -10.628548 -9.153563 -7.883146 28.313940</p>\n<p>2002-09-21 -10.390377 -8.727491 -6.399645 30.914107</p>\n<p>2002-09-22 -8.985362 -8.485624 -4.669462 31.367740</p>\n<p>2002-09-23 -9.558560 -8.781216 -4.499815 30.518439</p>\n<p>2002-09-24 -9.902058 -9.340490 -4.386639 30.105593</p>\n<p>2002-09-25 -10.216020 -9.480682 -3.933802 29.758560</p>\n<p>2002-09-26 -11.856774 -10.671012 -3.216025 29.369368</p>\n<p>[1000 rows x 4 columns]</p>\n<p>### <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#Excel\" title=\"Excel\"></a>Excel</p>\n<p>从<a href=\"http://pandas.pydata.org/pandas-docs/stable/io.html#io-excel\">MS Excel</a>中读取和写入数据</p>\n<p>写入一个excel文件</p>\n<p>1</p>\n<p>In [145]: <a href=\"http://df.to\">df.to</a>\\_excel('foo.xlsx', sheet\\_name='Sheet1')</p>\n<p>读取一个excel文件</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>6</p>\n<p>7</p>\n<p>8</p>\n<p>9</p>\n<p>10</p>\n<p>11</p>\n<p>12</p>\n<p>13</p>\n<p>14</p>\n<p>15</p>\n<p>16</p>\n<p>17</p>\n<p>18</p>\n<p>19</p>\n<p>20</p>\n<p>In [146]: pd.read\\_excel('foo.xlsx', 'Sheet1', index\\_col=None, na\\_values=['NA'])</p>\n<p>Out[146]:</p>\n<p>A B C D</p>\n<p>2000-01-01 0.266457 -0.399641 -0.219582 1.186860</p>\n<p>2000-01-02 -1.170732 -0.345873 1.653061 -0.282953</p>\n<p>2000-01-03 -1.734933 0.530468 2.060811 -0.515536</p>\n<p>2000-01-04 -1.555121 1.452620 0.239859 -1.156896</p>\n<p>2000-01-05 0.578117 0.511371 0.103552 -2.428202</p>\n<p>2000-01-06 0.478344 0.449933 -0.741620 -1.962409</p>\n<p>2000-01-07 1.235339 -0.091757 -1.543861 -1.084753</p>\n<p>... ... ... ... ...</p>\n<p>2002-09-20 -10.628548 -9.153563 -7.883146 28.313940</p>\n<p>2002-09-21 -10.390377 -8.727491 -6.399645 30.914107</p>\n<p>2002-09-22 -8.985362 -8.485624 -4.669462 31.367740</p>\n<p>2002-09-23 -9.558560 -8.781216 -4.499815 30.518439</p>\n<p>2002-09-24 -9.902058 -9.340490 -4.386639 30.105593</p>\n<p>2002-09-25 -10.216020 -9.480682 -3.933802 29.758560</p>\n<p>2002-09-26 -11.856774 -10.671012 -3.216025 29.369368</p>\n<p>[1000 rows x 4 columns]</p>\n<p>## <a href=\"http://studyai.site/2017/11/30/10%E5%88%86%E9%92%9F%E4%B8%8A%E6%89%8BPandas/#%E9%99%B7%E9%98%B1\" title=\"陷阱\"></a>陷阱</p>\n<p>如果你正在尝试一个操作，你会看到一个异常：</p>\n<p>1</p>\n<p>2</p>\n<p>3</p>\n<p>4</p>\n<p>5</p>\n<p>\\&gt;\\&gt;\\&gt; if pd.Series([False, True, False]):</p>\n<p>print(\"I was true\")</p>\n<p>Traceback</p>\n<p>...</p>\n<p>ValueError: The truth value of an array is ambiguous. Use a.empty, a.any() or a.all().</p>\n<p>请参阅<a href=\"http://pandas.pydata.org/pandas-docs/stable/basics.html#basics-compare\">Comparisons</a>以获取解释以及如何处理。</p>\n"
    }
  ]
}